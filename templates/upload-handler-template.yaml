AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: qPCR Upload Handler Lambda Function

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]
    Description: Environment name

Globals:
  Function:
    Runtime: python3.11
    Timeout: 60
    MemorySize: 512
    Environment:
      Variables:
        ENVIRONMENT: !Ref Environment

Resources:
  # S3 Bucket for uploads
  UploadBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'qpcr-uploads-${Environment}'
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldUploads
            Status: Enabled
            ExpirationInDays: 3
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: [GET, PUT, POST]
            AllowedOrigins: ['*']
            MaxAge: 3600
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # DynamoDB Table for experiments
  ExperimentsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'qpcr-experiments-${Environment}'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: experimentId
          AttributeType: S
        - AttributeName: userId
          AttributeType: S
      KeySchema:
        - AttributeName: experimentId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: UserIdIndex
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
            - AttributeName: experimentId
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      Tags:
        - Key: Environment
          Value: !Ref Environment

  # Lambda Function
  UploadHandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'qpcr-upload-handler-${Environment}'
      CodeUri: ./src/handlers/upload/
      Handler: app.lambda_handler
      Environment:
        Variables:
          UPLOAD_BUCKET: !Ref UploadBucket
          DYNAMODB_TABLE: !Ref ExperimentsTable
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - s3:PutObject
                - s3:PutObjectAcl
                - s3:GetObject
              Resource: !Sub '${UploadBucket.Arn}/*'
            - Effect: Allow
              Action:
                - dynamodb:PutItem
                - dynamodb:GetItem
                - dynamodb:UpdateItem
                - dynamodb:Query
              Resource: 
                - !GetAtt ExperimentsTable.Arn
                - !Sub '${ExperimentsTable.Arn}/index/*'
      Events:
        UploadAPI:
          Type: Api
          Properties:
            Path: /upload
            Method: POST
            RestApiId: !Ref QpcrApi
        HealthAPI:
          Type: Api
          Properties:
            Path: /health
            Method: GET
            RestApiId: !Ref QpcrApi

  # API Gateway
  QpcrApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub 'qpcr-api-${Environment}'
      StageName: !Ref Environment
      Cors:
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"
      DefinitionBody:
        openapi: '3.0.1'
        info:
          title: qPCR Analysis API
          version: '1.0'
        paths:
          /upload:
            post:
              x-amazon-apigateway-integration:
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UploadHandlerFunction.Arn}/invocations'
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
          /health:
            get:
              x-amazon-apigateway-integration:
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UploadHandlerFunction.Arn}/invocations'
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy

Outputs:
  ApiUrl:
    Description: API Gateway endpoint URL
    Value: !Sub 'https://${QpcrApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}'
  UploadBucketName:
    Description: Name of the S3 bucket for uploads
    Value: !Ref UploadBucket
  ExperimentsTableName:
    Description: Name of the DynamoDB table
    Value: !Ref ExperimentsTable
  UploadHandlerFunctionArn:
    Description: Upload Handler Lambda Function ARN
    Value: !GetAtt UploadHandlerFunction.Arn